%{
#include <stdio.h>
#include <ctype.h>

int regs[26];
int base;
int yylval;
int yylex(void);
void yyerror(char *s);
%}

%start list
%token DIGIT LETTER

%left '|'
%left '&'
%left '+' '-'
%left '*' '/' '%'
%left UMINUS  /* precedence for unary minus */

%% /* Grammar Rules Section */

list:
      /* empty */
    | list stat '\n'
    | list error '\n' { yyerrok; }
;

stat:
      expr { printf("%d\n", $1); }
    | LETTER '=' expr { regs[$1] = $3; }
;

expr:
      '(' expr ')'        { $$ = $2; }
    | expr '*' expr       { $$ = $1 * $3; }
    | expr '/' expr       { $$ = $1 / $3; }
    | expr '%' expr       { $$ = $1 % $3; }
    | expr '+' expr       { $$ = $1 + $3; }
    | expr '-' expr       { $$ = $1 - $3; }
    | expr '&' expr       { $$ = $1 & $3; }
    | expr '|' expr       { $$ = $1 | $3; }
    | '-' expr %prec UMINUS { $$ = -$2; }
    | LETTER              { $$ = regs[$1]; }
    | number
;

number:
      DIGIT {
          $$ = $1;
          base = ($1 == 0) ? 8 : 10;
      }
    | number DIGIT {
          $$ = base * $1 + $2;
      }
;

%% /* Lexer Section */

int yylex(void) {
    int c;

    /* Skip spaces and tabs */
    while ((c = getchar()) == ' ' || c == '\t');

    if (islower(c)) {
        yylval = c - 'a';
        return LETTER;
    }

    if (isdigit(c)) {
        yylval = c - '0';
        return DIGIT;
    }

    if (c == '\n' || c == EOF)
        return c;

    return c; /* return operators like +, -, *, etc. */
}

%% /* C Code Section */

int main(void) {
    return yyparse();
}

void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}
